[
  {
    "command": "archive",
    "title": "archive: Archive artifacts",
    "description": "Archives build output artifacts for later use. As of Jenkins 2.x, this step is deprecated in favor of the more configurable `archiveArtifacts`.",
    "parameters": [
      {
        "name": "includes",
        "type": "String",
        "description": "Include artifacts matching this <a href=\"https://ant.apache.org/manual/dirtasks.html#patterns\" rel=\"nofollow\">Ant style pattern</a>. Use a comma separated list to add more than one expression.",
        "isOptional": false
      },
      {
        "name": "excludes",
        "type": "String",
        "description": "Exclude artifacts matching this <a href=\"https://ant.apache.org/manual/dirtasks.html#patterns\" rel=\"nofollow\">Ant-style pattern</a>.\n \n\n Use a comma-separated list to add more than one expression.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "bat",
    "title": "bat: Windows Batch Script",
    "description": "",
    "parameters": [
      {
        "name": "script",
        "type": "String",
        "description": "Executes a Batch script. Multiple lines allowed. When using the `returnStdout` flag, you probably wish to prefix this with `@`, lest the command itself be included in the output.",
        "isOptional": false
      },
      {
        "name": "encoding",
        "type": "String",
        "description": "Encoding of process output. In the case of `returnStdout`, applies to the return value of this step; otherwise, or always for standard error, controls how text is copied to the build log. If unspecified, uses the system default encoding of the node on which the step is run. If there is any expectation that process output might include non-ASCII characters, it is best to specify the encoding explicitly. For example, if you have specific knowledge that a given process is going to be producing UTF-8 yet will be running on a node with a different system encoding (typically Windows, since every Linux distribution has defaulted to UTF-8 for a long time), you can ensure correct output by specifying: `encoding: 'UTF-8'`",
        "isOptional": true
      },
      {
        "name": "label",
        "type": "String",
        "description": "Label to be displayed in the pipeline step view and blue ocean details for the step instead of the step type. So the view is more meaningful and domain specific instead of technical.",
        "isOptional": true
      },
      {
        "name": "returnStatus",
        "type": "boolean",
        "description": "Normally, a script which exits with a nonzero status code will cause the step to fail with an exception. If this option is checked, the return value of the step will instead be the status code. You may then compare it to zero, for example.",
        "isOptional": true
      },
      {
        "name": "returnStdout",
        "type": "boolean",
        "description": "If checked, standard output from the task is returned as the step value as a `String`, rather than being printed to the build log. (Standard error, if any, will still be printed to the log.) You will often want to call `.trim()` on the result to strip off a trailing newline.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "catchError",
    "title": "catchError: Catch error and set build result to failure",
    "description": "If the body throws an exception, mark the build as a failure, but nonetheless continue to execute the Pipeline from the statement following the `catchError` step. The behavior of the step when an exception is thrown can be configured to print a message, set a build result other than failure, change the stage result, or ignore certain kinds of exceptions that are used to interrupt the build.\n \nThis step is most useful when used in Declarative Pipeline or with the options to set the stage result or ignore build interruptions. Otherwise, consider using plain `try`-`catch`(-`finally`) blocks. It is also useful when using certain post-build actions (notifiers) originally defined for freestyle projects which pay attention to the result of the ongoing build. \n\n \n\n\n \n```groovy\nnode {\n    catchError {\n        sh 'might fail'\n    }\n    step([$class: 'Mailer', recipients: 'admin@somewhere'])\n}\n\n```\n\n \nIf the shell step fails, the Pipeline build’s status will be set to failed, so that the subsequent mail step will see that this build is failed. In the case of the mail sender, this means that it will send mail. (It may also send mail if this build <em>succeeded</em> but previous ones failed, and so on.) Even in that case, this step can be replaced by the following idiom: \n\n \n\n\n \n```groovy\nnode {\n    try {\n        sh 'might fail'\n    } catch (err) {\n        echo \"Caught: ${err}\"\n        currentBuild.result = 'FAILURE'\n    }\n    step([$class: 'Mailer', recipients: 'admin@somewhere'])\n}\n\n```\n\n \nFor other cases, plain `try`-`catch`(-`finally`) blocks may be used: \n\n \n\n\n \n```groovy\nnode {\n    sh './set-up.sh'\n    try {\n        sh 'might fail'\n        echo 'Succeeded!'\n    } catch (err) {\n        echo \"Failed: ${err}\"\n    } finally {\n        sh './tear-down.sh'\n    }\n    echo 'Printed whether above succeeded or failed.'\n}\n// …and the pipeline as a whole succeeds\n\n```\n\n \nSee <a href=\"https://github.com/jenkinsci/workflow-basic-steps-plugin/blob/master/CORE-STEPS.md#interacting-with-build-status\" rel=\"nofollow\">this document</a> for background.",
    "parameters": [
      {
        "name": "buildResult",
        "type": "String",
        "description": "If an error is caught, the overall build result will be set to this value. Note that the build result can only get worse, so you cannot change the result to `SUCCESS` if the current result is `UNSTABLE` or worse. Use `SUCCESS` or `null` to keep the build result from being set when an error is caught.",
        "isOptional": true
      },
      {
        "name": "catchInterruptions",
        "type": "boolean",
        "description": "If true, certain types of exceptions that are used to interrupt the flow of execution for Pipelines will be caught and handled by the step. If false, those types of exceptions will be caught and immediately rethrown. Examples of these types of exceptions include those thrown when a build is manually aborted through the UI and those thrown by the `timeout` step.",
        "isOptional": true
      },
      {
        "name": "message",
        "type": "String",
        "description": "A message that will be logged to the console if an error is caught. If the stage result is specified, the message will also be associated with that result and may be shown in visualizations.",
        "isOptional": true
      },
      {
        "name": "stageResult",
        "type": "String",
        "description": "If an error is caught, the stage result will be set to this value. If a message was specified, the message will be associated with this result. Use `SUCCESS` or `null` to keep the stage result from being set when an error is caught.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "deleteDir",
    "title": "deleteDir: Recursively delete the current directory from the workspace",
    "description": "Recursively deletes the current directory and its contents. Symbolic links and junctions will not be followed but will be removed. To delete a specific directory of a workspace wrap the `deleteDir` step in a `dir` step.",
    "parameters": []
  },
  {
    "command": "dir",
    "title": "dir: Change current directory",
    "description": "Change current directory. Any step inside the `dir` block will use this directory as current and any relative path will use it as base path.",
    "parameters": [
      {
        "name": "path",
        "type": "String",
        "description": "",
        "isOptional": false
      }
    ]
  },
  {
    "command": "echo",
    "title": "echo: Print Message",
    "description": "",
    "parameters": [
      {
        "name": "message",
        "type": "String",
        "description": "",
        "isOptional": false
      }
    ]
  },
  {
    "command": "error",
    "title": "error: Error signal",
    "description": "Signals an error. Useful if you want to conditionally abort some part of your program. You can also just `throw new Exception()`, but this step will avoid printing a stack trace.",
    "parameters": [
      {
        "name": "message",
        "type": "String",
        "description": "",
        "isOptional": false
      }
    ]
  },
  {
    "command": "fileExists",
    "title": "fileExists: Verify if file exists in workspace",
    "description": "Checks if the given file (as relative path to current directory) exists. Returns `true | false`.",
    "parameters": [
      {
        "name": "file",
        "type": "String",
        "description": "Relative (`/`-separated) path to file within a workspace to verify its existence.",
        "isOptional": false
      }
    ]
  },
  {
    "command": "getContext",
    "title": "getContext: Get contextual object from internal APIs",
    "description": "Obtains a contextual object as in `StepContext.get`; cf. `withContext`. Takes a single `type` argument. Example: \n\n\n```groovy\ngetContext hudson.FilePath\n```\n\n\n For use from trusted code, such as global libraries, which can manipulate internal Jenkins APIs.",
    "parameters": [
      {
        "name": "type",
        "type": "java.lang.Class<?>",
        "description": "",
        "isOptional": false
      }
    ]
  },
  {
    "command": "isUnix",
    "title": "isUnix: Checks if running on a Unix-like node",
    "description": "Returns true if enclosing `node` is running on a Unix-like system (such as Linux or Mac OS X), false if Windows.",
    "parameters": []
  },
  {
    "command": "mail",
    "title": "mail: Mail",
    "description": "Simple step for sending email.",
    "parameters": [
      {
        "name": "subject",
        "type": "String",
        "description": "Email subject line.",
        "isOptional": false
      },
      {
        "name": "body",
        "type": "String",
        "description": "Email body.",
        "isOptional": false
      },
      {
        "name": "bcc",
        "type": "String",
        "description": "BCC email address list. Comma separated list of email addresses.",
        "isOptional": true
      },
      {
        "name": "cc",
        "type": "String",
        "description": "CC email address list. Comma separated list of email addresses.",
        "isOptional": true
      },
      {
        "name": "charset",
        "type": "String",
        "description": "Email body character encoding. Defaults to `UTF-8`",
        "isOptional": true
      },
      {
        "name": "from",
        "type": "String",
        "description": "From email address. Defaults to the admin address globally configured for the Jenkins instance.",
        "isOptional": true
      },
      {
        "name": "mimeType",
        "type": "String",
        "description": "Email body MIME type. Defaults to `text/plain`.",
        "isOptional": true
      },
      {
        "name": "replyTo",
        "type": "String",
        "description": "Reploy-To email address. Defaults to the admin address globally configured for the Jenkins instance.",
        "isOptional": true
      },
      {
        "name": "to",
        "type": "String",
        "description": "To email address list. Comma separated list of email addresses.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "node",
    "title": "node: Allocate node",
    "description": "Allocates an executor on a node (typically a slave) and runs further code in the context of a workspace on that slave.",
    "parameters": [
      {
        "name": "label",
        "type": "String",
        "description": "Computer name, label name, or any other label expression like `linux &amp;&amp; 64bit` to restrict where this step builds. May be left blank, in which case any available executor is taken.\n \n### Supported operators\n The following operators are supported, in descending order of precedence:\n <dl>\n  <dt>\n   (expression)\n  </dt>\n  <dd>\n parentheses — used to explicitly define the associativity of an expression\n  </dd>\n  <dt>\n   !expression\n  </dt>\n  <dd>\n NOT — negation; the result of expression must **not** be true\n  </dd>\n  <dt>\n   a &amp;&amp; b\n  </dt>\n  <dd>\n AND — **both** of the expressions a and b must be true\n  </dd>\n  <dt>\n   a || b\n  </dt>\n  <dd>\n OR — **either** of the expressions a or b may be true\n  </dd>\n  <dt>\n   a -&gt; b\n  </dt>\n  <dd>\n \"implies\" operator — equivalent to !a || b.\n   \n\n For example, windows -&gt; x64 could be thought of as \"if a Windows agent is used, then that agent <i>must</i> be 64-bit\", while still allowing this block to be executed on any agents that <i>do not</i> have the windows label, regardless of whether they have also have an x64 label\n  </dd>\n  <dt>\n   a &lt;-&gt; b\n  </dt>\n  <dd>\n \"if and only if\" operator — equivalent to a &amp;&amp; b || !a &amp;&amp; !b\n   \n\n For example, windows &lt;-&gt; dc2 could be thought of as \"if a Windows agent is used, then that agent <i>must</i> be in datacenter 2, but if a non-Windows agent is used, then it <i>must not</i> be in datacenter 2\"\n  </dd>\n </dl>\n \n### Notes\n\n \n  \n*  All operators are left-associative, i.e. a -&gt; b -&gt; c is equivalent to (a -&gt; b) -&gt; c. \n\n  \n*  Labels or agent names can be surrounded with quotation marks if they contain characters that would conflict with the operator syntax.\n\n For example, \"osx (10.11)\" || \"Windows Server\". \n\n  \n*  Expressions can be written without whitespace, but including it is recommended for readability; Jenkins will ignore whitespace when evaluating expressions. \n\n  \n*  Matching labels or agent names with wildcards or regular expressions is not supported. \n\n  \n*  An empty expression will always evaluate to <i>true</i>, matching all agents. \n\n \n \n### Examples\n\n <dl>\n  <dt>\n   master\n  </dt>\n  <dd>\n   This block may be executed only on the Jenkins master\n  </dd>\n  <dd>\n  </dd>\n  <dt>\n   linux-machine-42\n  </dt>\n  <dd>\n This block may be executed only on the agent with the name linux-machine-42 (or on any machine that happens to have a label called linux-machine-42)\n  </dd>\n  <dt>\n   windows &amp;&amp; jdk9\n  </dt>\n  <dd>\n This block may be executed only on any Windows agent that has version 9 of the Java Development Kit installed (assuming that agents with JDK 9 installed have been given a jdk9 label)\n  </dd>\n  <dt>\n   postgres &amp;&amp; !vm &amp;&amp; (linux || freebsd)\n  </dt>\n  <dd>\n This block may be executed only any on Linux or FreeBSD agent, so long as they are <i>not</i> a virtual machine, and they have PostgreSQL installed (assuming that each agent has the appropriate labels — in particular, each agent running in a virtual machine must have the vm label in order for this example to work as expected)\n  </dd>\n </dl>",
        "isOptional": false
      }
    ]
  },
  {
    "command": "powershell",
    "title": "powershell: PowerShell Script",
    "description": "",
    "parameters": [
      {
        "name": "script",
        "type": "String",
        "description": "Executes a PowerShell script. Multiple lines allowed. This plugin supports Microsoft PowerShell 3+.",
        "isOptional": false
      },
      {
        "name": "encoding",
        "type": "String",
        "description": "Encoding of process output. In the case of `returnStdout`, applies to the return value of this step; otherwise, or always for standard error, controls how text is copied to the build log. If unspecified, uses the system default encoding of the node on which the step is run. If there is any expectation that process output might include non-ASCII characters, it is best to specify the encoding explicitly. For example, if you have specific knowledge that a given process is going to be producing UTF-8 yet will be running on a node with a different system encoding (typically Windows, since every Linux distribution has defaulted to UTF-8 for a long time), you can ensure correct output by specifying: `encoding: 'UTF-8'`",
        "isOptional": true
      },
      {
        "name": "label",
        "type": "String",
        "description": "Label to be displayed in the pipeline step view and blue ocean details for the step instead of the step type. So the view is more meaningful and domain specific instead of technical.",
        "isOptional": true
      },
      {
        "name": "returnStatus",
        "type": "boolean",
        "description": "Normally, a script which exits with a nonzero status code will cause the step to fail with an exception. If this option is checked, the return value of the step will instead be the status code. You may then compare it to zero, for example.",
        "isOptional": true
      },
      {
        "name": "returnStdout",
        "type": "boolean",
        "description": "If checked, standard output from the task is returned as the step value as a `String`, rather than being printed to the build log. (Standard error, if any, will still be printed to the log.) You will often want to call `.trim()` on the result to strip off a trailing newline.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "pwd",
    "title": "pwd: Determine current directory",
    "description": "Returns the current directory path as a string.",
    "parameters": [
      {
        "name": "tmp",
        "type": "boolean",
        "description": "If selected, return a temporary directory associated with the workspace rather than the workspace itself. This is an appropriate place to put temporary files which should not clutter a source checkout; local repositories or caches; etc.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "pwsh",
    "title": "pwsh: PowerShell Core Script",
    "description": "",
    "parameters": [
      {
        "name": "script",
        "type": "String",
        "description": "",
        "isOptional": false
      },
      {
        "name": "encoding",
        "type": "String",
        "description": "Encoding of process output. In the case of `returnStdout`, applies to the return value of this step; otherwise, or always for standard error, controls how text is copied to the build log. If unspecified, uses the system default encoding of the node on which the step is run. If there is any expectation that process output might include non-ASCII characters, it is best to specify the encoding explicitly. For example, if you have specific knowledge that a given process is going to be producing UTF-8 yet will be running on a node with a different system encoding (typically Windows, since every Linux distribution has defaulted to UTF-8 for a long time), you can ensure correct output by specifying: `encoding: 'UTF-8'`",
        "isOptional": true
      },
      {
        "name": "label",
        "type": "String",
        "description": "Label to be displayed in the pipeline step view and blue ocean details for the step instead of the step type. So the view is more meaningful and domain specific instead of technical.",
        "isOptional": true
      },
      {
        "name": "returnStatus",
        "type": "boolean",
        "description": "Normally, a script which exits with a nonzero status code will cause the step to fail with an exception. If this option is checked, the return value of the step will instead be the status code. You may then compare it to zero, for example.",
        "isOptional": true
      },
      {
        "name": "returnStdout",
        "type": "boolean",
        "description": "If checked, standard output from the task is returned as the step value as a `String`, rather than being printed to the build log. (Standard error, if any, will still be printed to the log.) You will often want to call `.trim()` on the result to strip off a trailing newline.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "readFile",
    "title": "readFile: Read file from workspace",
    "description": "Reads a file from a relative path (with root in current directory, usually workspace) and returns its content as a plain string.",
    "parameters": [
      {
        "name": "file",
        "type": "String",
        "description": "Relative (`/`-separated) path to file within a workspace to read.",
        "isOptional": false
      },
      {
        "name": "encoding",
        "type": "String",
        "description": "The encoding to use when reading the file. If left blank, the platform default encoding will be used. Binary files can be read into a Base64-encoded string by specifying \"Base64\" as the encoding.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "retry",
    "title": "retry: Retry the body up to N times",
    "description": "Retry the block (up to N times) if any exception happens during its body execution. If an exception happens on the final attempt then it will lead to aborting the build (unless it is caught and processed somehow). User aborts of the build are <em>not</em> caught.",
    "parameters": [
      {
        "name": "count",
        "type": "int",
        "description": "",
        "isOptional": false
      }
    ]
  },
  {
    "command": "sh",
    "title": "sh: Shell Script",
    "description": "",
    "parameters": [
      {
        "name": "script",
        "type": "String",
        "description": "Runs a Bourne shell script, typically on a Unix node. Multiple lines are accepted. \n\n \n An interpreter selector may be used, for example: `#!/usr/bin/perl` \n\n \n Otherwise the system default shell will be run, using the `-xe` flags (you can specify `set +e` and/or `set +x` to disable those).",
        "isOptional": false
      },
      {
        "name": "encoding",
        "type": "String",
        "description": "Encoding of process output. In the case of `returnStdout`, applies to the return value of this step; otherwise, or always for standard error, controls how text is copied to the build log. If unspecified, uses the system default encoding of the node on which the step is run. If there is any expectation that process output might include non-ASCII characters, it is best to specify the encoding explicitly. For example, if you have specific knowledge that a given process is going to be producing UTF-8 yet will be running on a node with a different system encoding (typically Windows, since every Linux distribution has defaulted to UTF-8 for a long time), you can ensure correct output by specifying: `encoding: 'UTF-8'`",
        "isOptional": true
      },
      {
        "name": "label",
        "type": "String",
        "description": "Label to be displayed in the pipeline step view and blue ocean details for the step instead of the step type. So the view is more meaningful and domain specific instead of technical.",
        "isOptional": true
      },
      {
        "name": "returnStatus",
        "type": "boolean",
        "description": "Normally, a script which exits with a nonzero status code will cause the step to fail with an exception. If this option is checked, the return value of the step will instead be the status code. You may then compare it to zero, for example.",
        "isOptional": true
      },
      {
        "name": "returnStdout",
        "type": "boolean",
        "description": "If checked, standard output from the task is returned as the step value as a `String`, rather than being printed to the build log. (Standard error, if any, will still be printed to the log.) You will often want to call `.trim()` on the result to strip off a trailing newline.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "sleep",
    "title": "sleep: Sleep",
    "description": "Simply pauses the Pipeline build until the given amount of time has expired. Equivalent to (on Unix) `sh 'sleep …'`. May be used to pause one branch of `parallel` while another proceeds.",
    "parameters": [
      {
        "name": "time",
        "type": "int",
        "description": "The length of time for which the step will sleep.",
        "isOptional": false
      },
      {
        "name": "unit",
        "type": "NANOSECONDSMICROSECONDSMILLISECONDSSECONDSMINUTESHOURSDAYS",
        "description": "The unit for the time parameter. Defaults to 'SECONDS' if not specified.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "stash",
    "title": "stash: Stash some files to be used later in the build",
    "description": "Saves a set of files for later use on any node/workspace in the same Pipeline run. By default, stashed files are discarded at the end of a pipeline run. Other plugins may change this behavior to preserve stashes for longer. For example, Declarative Pipeline includes a `preserveStashes()` option to allow stashes from a run to be retained and used if that run is restarted.\n \n\n Stashes from one Pipeline run are not available in other runs, other Pipelines, or other jobs. If you want to persist artifacts for use outside of a single run, consider using <a href=\"https://jenkins.io/doc/pipeline/steps/core/#archiveartifacts-archive-the-artifacts\" rel=\"nofollow\"> `archiveArtifacts`</a> instead. **Note** that the `stash` and `unstash` steps are designed for use with small files. For large data transfers, use the External Workspace Manager plugin, or use an external repository manager such as Nexus or Artifactory. This is because stashed files are archived in a compressed TAR, and with large files this demands considerable on-master resources, particularly CPU time. There's not a hard stash size limit, but between 5-100 MB you should probably consider alternatives.",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "description": "Name of a stash. Should be a simple identifier akin to a job name.",
        "isOptional": false
      },
      {
        "name": "allowEmpty",
        "type": "boolean",
        "description": "",
        "isOptional": true
      },
      {
        "name": "excludes",
        "type": "String",
        "description": "Optional set of <a href=\"https://ant.apache.org/manual/dirtasks.html#patterns\" rel=\"nofollow\">Ant-style exclude patterns</a>.\n \n\n Use a comma separated list to add more than one expression.\n \n\n If blank, no files will be excluded.",
        "isOptional": true
      },
      {
        "name": "includes",
        "type": "String",
        "description": "Optional set of <a href=\"https://ant.apache.org/manual/dirtasks.html#patterns\" rel=\"nofollow\">Ant-style include patterns</a>.\n \n\n Use a comma separated list to add more than one expression.\n \n\n If blank, treated like `**`: all files.\n \n\n The current working directory is the base directory for the saved files, which will later be restored in the same relative locations, so if you want to use a subdirectory wrap this in <a href=\"https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#code-dir-code-change-current-directory\" rel=\"nofollow\">`dir`</a>.",
        "isOptional": true
      },
      {
        "name": "useDefaultExcludes",
        "type": "boolean",
        "description": "If selected, use the default excludes from Ant - see <a href=\"http://ant.apache.org/manual/dirtasks.html#defaultexcludes\" rel=\"nofollow\">here</a> for the list.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "step",
    "title": "step: General Build Step",
    "description": "This is a special step that allows to call builders or post-build actions (as in freestyle or similar projects), in general \"build steps\".\n Just select the build step to call from the dropdown list and configure it as needed.\n \n\n \n\n Note that only Pipeline-compatible steps will be shown in the list.\n \n\n\n\n\nTo use this step you need to specify a delegate class, e.g step([$class: 'A3Builder']).",
    "parameters": []
  },
  {
    "command": "timeout",
    "title": "timeout: Enforce time limit",
    "description": "Executes the code inside the block with a determined time out limit. If the time limit is reached, an exception (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException) is thrown, which leads to aborting the build (unless it is caught and processed somehow).",
    "parameters": [
      {
        "name": "time",
        "type": "int",
        "description": "The length of time for which this step will wait before cancelling the nested block.",
        "isOptional": false
      },
      {
        "name": "activity",
        "type": "boolean",
        "description": "Timeout after no activity in logs for this block instead of absolute duration.",
        "isOptional": true
      },
      {
        "name": "unit",
        "type": "NANOSECONDSMICROSECONDSMILLISECONDSSECONDSMINUTESHOURSDAYS",
        "description": "The unit of the time parameter. Defaults to 'MINUTES' if not specified.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "tool",
    "title": "tool: Use a tool from a predefined Tool Installation",
    "description": "Binds a tool installation to a variable (the tool home directory is returned). Only tools already configured in `Configure System` are available here. If the original tool installer has the auto-provision feature, then the tool will be installed as required.",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "description": "",
        "isOptional": false
      },
      {
        "name": "type",
        "type": "String",
        "description": "",
        "isOptional": true
      }
    ]
  },
  {
    "command": "unarchive",
    "title": "unarchive: Copy archived artifacts into the workspace",
    "description": "",
    "parameters": [
      {
        "name": "mapping",
        "type": "java.util.Map<java.lang.String, java.lang.String>",
        "description": "",
        "isOptional": true
      }
    ]
  },
  {
    "command": "unstable",
    "title": "unstable: Set stage result to unstable",
    "description": "Prints a message to the log and sets the overall build result and the stage result to `UNSTABLE`. The message will also be associated with the stage result and may be shown in visualizations.",
    "parameters": [
      {
        "name": "message",
        "type": "String",
        "description": "A message that will be logged to the console. The message will also be associated with the stage result and may be shown in visualizations.",
        "isOptional": false
      }
    ]
  },
  {
    "command": "unstash",
    "title": "unstash: Restore files previously stashed",
    "description": "Restores a set of files previously `stash`ed into the current workspace.",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "description": "Name of a previously saved stash.",
        "isOptional": false
      }
    ]
  },
  {
    "command": "waitUntil",
    "title": "waitUntil: Wait for condition",
    "description": "Runs its body repeatedly until it returns `true`. If it returns `false`, waits a while and tries again. (Subsequent failures will slow down the delay between attempts up to a maximum of 15 seconds.) There is no limit to the number of retries, but if the body throws an error that is thrown up immediately.",
    "parameters": [
      {
        "name": "initialRecurrencePeriod",
        "type": "long",
        "description": "Sets the initial wait period, in milliseconds, between retries. Defaults to 250ms.\n \n\n Each failure will slow down the delay between attempts up to a maximum of 15 seconds.",
        "isOptional": true
      },
      {
        "name": "quiet",
        "type": "boolean",
        "description": "If true, the step does not log a message each time the condition is checked. Defaults to false.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "warnError",
    "title": "warnError: Catch error and set build and stage result to unstable",
    "description": "Executes its body, and if an exception is thrown, sets the overall build result and the stage result to `UNSTABLE`, prints a specified message and the thrown exception to the build log, and associates the stage result with the message so that it can be displayed by visualizations.\n \nEquivalent to `catchError(message: message, buildResult: 'UNSTABLE', stageResult: 'UNSTABLE')`.",
    "parameters": [
      {
        "name": "message",
        "type": "String",
        "description": "A message that will be logged to the console if an error is caught. The message will also be associated with the stage result and may be shown in visualizations.",
        "isOptional": false
      },
      {
        "name": "catchInterruptions",
        "type": "boolean",
        "description": "If true, certain types of exceptions that are used to interrupt the flow of execution for Pipelines will be caught and handled by the step. If false, those types of exceptions will be caught and immediately rethrown. Examples of these types of exceptions include those thrown when a build is manually aborted through the UI and those thrown by the `timeout` step.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "withContext",
    "title": "withContext: Use contextual object from internal APIs within a block",
    "description": "Wraps a block in a contextual object as in `BodyInvoker.withContext`; cf. `getContext`. Takes a single `context` argument plus a block. Example: \n\n\n```groovy\nwithContext(new MyConsoleLogFilter()) {\n    sh 'process'\n}\n```\n\n\n Automatically merges its argument with contextual objects in the case of `ConsoleLogFilter`, `LauncherDecorator`, and `EnvironmentExpander`. \n\n\n For use from trusted code, such as global libraries, which can manipulate internal Jenkins APIs. \n\n\n **Do not** attempt to pass objects defined in Groovy; only Java-defined objects are supported. Really you should avoid using this and `getContext` and just define a `Step` in a plugin instead.",
    "parameters": [
      {
        "name": "context",
        "type": "Object",
        "description": "",
        "isOptional": false
      }
    ]
  },
  {
    "command": "withEnv",
    "title": "withEnv: Set environment variables",
    "description": "Sets one or more environment variables within a block. These are available to any external processes spawned within that scope. For example:\n \n\n\n \n```groovy\nnode {\n  withEnv(['MYTOOL_HOME=/usr/local/mytool']) {\n    sh '$MYTOOL_HOME/bin/start'\n  }\n}\n\n```\n\n \n(Note that here we are using single quotes in Groovy, so the variable expansion is being done by the Bourne shell, not Jenkins.) \n\n \nSee the documentation for the `env` singleton for more information on environment variables.",
    "parameters": [
      {
        "name": "overrides",
        "type": "String",
        "description": "A list of environment variables to set, each in the form `VARIABLE=value` or `VARIABLE=` to unset variables otherwise defined. You may also use the syntax `PATH+WHATEVER=/something` to prepend `/something` to `$PATH`.",
        "isOptional": false
      }
    ]
  },
  {
    "command": "wrap",
    "title": "wrap: General Build Wrapper",
    "description": "This is a special step that allows to call build wrappers (also called \"Environment Configuration\" in freestyle or similar projects).\n Just select the wrapper to use from the dropdown list and configure it as needed. Everything inside the wrapper block is under its effect.\n \n\n \n\n Note that only Pipeline-compatible wrappers will be shown in the list.\n \n\n\n\n\nTo use this step you need to specify a delegate class, e.g wrap([$class: 'AnsiColorBuildWrapper']).",
    "parameters": []
  },
  {
    "command": "writeFile",
    "title": "writeFile: Write file to workspace",
    "description": "Write the given content to a named file in the current directory.",
    "parameters": [
      {
        "name": "file",
        "type": "String",
        "description": "",
        "isOptional": false
      },
      {
        "name": "text",
        "type": "String",
        "description": "",
        "isOptional": false
      },
      {
        "name": "encoding",
        "type": "String",
        "description": "The target encoding for the file. If left blank, the platform default encoding will be used. If the text is a Base64-encoded string, the decoded binary data can be written to the file by specifying \"Base64\" as the encoding.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "ws",
    "title": "ws: Allocate workspace",
    "description": "Allocates a workspace. Note that a workspace is automatically allocated for you with the `node` step.",
    "parameters": [
      {
        "name": "dir",
        "type": "String",
        "description": "A workspace is automatically allocated for you with the `node` step, or you can get an alternate workspace with this `ws` step, but by default the location is chosen automatically. (Something like `SLAVE_ROOT/workspace/JOB_NAME@2`.) \n\n\n You can instead specify a path here and that workspace will be locked instead. (The path may be relative to the slave root, or absolute.) \n\n\n If concurrent builds ask for the same workspace, a directory with a suffix such as `@2` may be locked instead. Currently there is no option to wait to lock the exact directory requested; if you need to enforce that behavior, you can either fail (`error`) when `pwd` indicates that you got a different directory, or you may enforce serial execution of this part of the build by some other means such as `stage name: '…', concurrency: 1`. \n\n\n If you do not care about locking, just use the `dir` step to change current directory.",
        "isOptional": false
      }
    ]
  }
]