[
  {
    "command": "bat",
    "title": "bat: Windows Batch Script",
    "args": [
      {
        "name": "script",
        "type": "String",
        "description": "Executes a Batch script. Multiple lines allowed. When using the `returnStdout` flag, you probably wish to prefix this with `@`, lest the command itself be included in the output.",
        "isOptional": false
      },
      {
        "name": "encoding",
        "type": "String",
        "description": "Encoding of process output. In the case of `returnStdout`, applies to the return value of this step; otherwise, or always for standard error, controls how text is copied to the build log. If unspecified, uses the system default encoding of the node on which the step is run. If there is any expectation that process output might include non-ASCII characters, it is best to specify the encoding explicitly. For example, if you have specific knowledge that a given process is going to be producing UTF-8 yet will be running on a node with a different system encoding (typically Windows, since every Linux distribution has defaulted to UTF-8 for a long time), you can ensure correct output by specifying: `encoding: 'UTF-8'`",
        "isOptional": true
      },
      {
        "name": "label",
        "type": "String",
        "description": "Label to be displayed in the pipeline step view and blue ocean details for the step instead of the step type. So the view is more meaningful and domain specific instead of technical.",
        "isOptional": true
      },
      {
        "name": "returnStatus",
        "type": "boolean",
        "description": "Normally, a script which exits with a nonzero status code will cause the step to fail with an exception. If this option is checked, the return value of the step will instead be the status code. You may then compare it to zero, for example.",
        "isOptional": true
      },
      {
        "name": "returnStdout",
        "type": "boolean",
        "description": "If checked, standard output from the task is returned as the step value as a `String`, rather than being printed to the build log. (Standard error, if any, will still be printed to the log.) You will often want to call `.trim()` on the result to strip off a trailing newline.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "node",
    "title": "node: Allocate nodeSupported operatorsNotesExamples",
    "args": [
      {
        "name": "label",
        "type": "String",
        "description": "Computer name, label name, or any other label expression like `linux &amp;&amp; 64bit` to restrict where this step builds. May be left blank, in which case any available executor is taken.\n <h3>Supported operators</h3> The following operators are supported, in descending order of precedence:\n <dl>\n  <dt>\n   (expression)\n  </dt>\n  <dd>\n    parentheses — used to explicitly define the associativity of an expression\n  </dd>\n  <dt>\n   !expression\n  </dt>\n  <dd>\n    NOT — negation; the result of expression must <b>not</b> be true\n  </dd>\n  <dt>\n   a &amp;&amp; b\n  </dt>\n  <dd>\n    AND — <b>both</b> of the expressions a and b must be true\n  </dd>\n  <dt>\n   a || b\n  </dt>\n  <dd>\n    OR — <b>either</b> of the expressions a or b may be true\n  </dd>\n  <dt>\n   a -&gt; b\n  </dt>\n  <dd>\n    \"implies\" operator — equivalent to !a || b.\n   <br> For example, windows -&gt; x64 could be thought of as \"if a Windows agent is used, then that agent <i>must</i> be 64-bit\", while still allowing this block to be executed on any agents that <i>do not</i> have the windows label, regardless of whether they have also have an x64 label\n  </dd>\n  <dt>\n   a &lt;-&gt; b\n  </dt>\n  <dd>\n    \"if and only if\" operator — equivalent to a &amp;&amp; b || !a &amp;&amp; !b\n   <br> For example, windows &lt;-&gt; dc2 could be thought of as \"if a Windows agent is used, then that agent <i>must</i> be in datacenter 2, but if a non-Windows agent is used, then it <i>must not</i> be in datacenter 2\"\n  </dd>\n </dl>\n <h3>Notes</h3>\n <ul>\n  <li> All operators are left-associative, i.e. a -&gt; b -&gt; c is equivalent to (a -&gt; b) -&gt; c. </li>\n  <li> Labels or agent names can be surrounded with quotation marks if they contain characters that would conflict with the operator syntax.<br> For example, \"osx (10.11)\" || \"Windows Server\". </li>\n  <li> Expressions can be written without whitespace, but including it is recommended for readability; Jenkins will ignore whitespace when evaluating expressions. </li>\n  <li> Matching labels or agent names with wildcards or regular expressions is not supported. </li>\n  <li> An empty expression will always evaluate to <i>true</i>, matching all agents. </li>\n </ul>\n <h3>Examples</h3>\n <dl>\n  <dt>\n   master\n  </dt>\n  <dd>\n   This block may be executed only on the Jenkins master\n  </dd>\n  <dd>\n  </dd>\n  <dt>\n   linux-machine-42\n  </dt>\n  <dd>\n    This block may be executed only on the agent with the name linux-machine-42 (or on any machine that happens to have a label called linux-machine-42)\n  </dd>\n  <dt>\n   windows &amp;&amp; jdk9\n  </dt>\n  <dd>\n    This block may be executed only on any Windows agent that has version 9 of the Java Development Kit installed (assuming that agents with JDK 9 installed have been given a jdk9 label)\n  </dd>\n  <dt>\n   postgres &amp;&amp; !vm &amp;&amp; (linux || freebsd)\n  </dt>\n  <dd>\n    This block may be executed only any on Linux or FreeBSD agent, so long as they are <i>not</i> a virtual machine, and they have PostgreSQL installed (assuming that each agent has the appropriate labels — in particular, each agent running in a virtual machine must have the vm label in order for this example to work as expected)\n  </dd>\n </dl>",
        "isOptional": false
      }
    ]
  },
  {
    "command": "powershell",
    "title": "powershell: PowerShell Script",
    "args": [
      {
        "name": "script",
        "type": "String",
        "description": "Executes a PowerShell script. Multiple lines allowed. This plugin supports Microsoft PowerShell 3+.",
        "isOptional": false
      },
      {
        "name": "encoding",
        "type": "String",
        "description": "Encoding of process output. In the case of `returnStdout`, applies to the return value of this step; otherwise, or always for standard error, controls how text is copied to the build log. If unspecified, uses the system default encoding of the node on which the step is run. If there is any expectation that process output might include non-ASCII characters, it is best to specify the encoding explicitly. For example, if you have specific knowledge that a given process is going to be producing UTF-8 yet will be running on a node with a different system encoding (typically Windows, since every Linux distribution has defaulted to UTF-8 for a long time), you can ensure correct output by specifying: `encoding: 'UTF-8'`",
        "isOptional": true
      },
      {
        "name": "label",
        "type": "String",
        "description": "Label to be displayed in the pipeline step view and blue ocean details for the step instead of the step type. So the view is more meaningful and domain specific instead of technical.",
        "isOptional": true
      },
      {
        "name": "returnStatus",
        "type": "boolean",
        "description": "Normally, a script which exits with a nonzero status code will cause the step to fail with an exception. If this option is checked, the return value of the step will instead be the status code. You may then compare it to zero, for example.",
        "isOptional": true
      },
      {
        "name": "returnStdout",
        "type": "boolean",
        "description": "If checked, standard output from the task is returned as the step value as a `String`, rather than being printed to the build log. (Standard error, if any, will still be printed to the log.) You will often want to call `.trim()` on the result to strip off a trailing newline.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "pwsh",
    "title": "pwsh: PowerShell Core Script",
    "args": [
      {
        "name": "script",
        "type": "String",
        "description": "",
        "isOptional": false
      },
      {
        "name": "encoding",
        "type": "String",
        "description": "Encoding of process output. In the case of `returnStdout`, applies to the return value of this step; otherwise, or always for standard error, controls how text is copied to the build log. If unspecified, uses the system default encoding of the node on which the step is run. If there is any expectation that process output might include non-ASCII characters, it is best to specify the encoding explicitly. For example, if you have specific knowledge that a given process is going to be producing UTF-8 yet will be running on a node with a different system encoding (typically Windows, since every Linux distribution has defaulted to UTF-8 for a long time), you can ensure correct output by specifying: `encoding: 'UTF-8'`",
        "isOptional": true
      },
      {
        "name": "label",
        "type": "String",
        "description": "Label to be displayed in the pipeline step view and blue ocean details for the step instead of the step type. So the view is more meaningful and domain specific instead of technical.",
        "isOptional": true
      },
      {
        "name": "returnStatus",
        "type": "boolean",
        "description": "Normally, a script which exits with a nonzero status code will cause the step to fail with an exception. If this option is checked, the return value of the step will instead be the status code. You may then compare it to zero, for example.",
        "isOptional": true
      },
      {
        "name": "returnStdout",
        "type": "boolean",
        "description": "If checked, standard output from the task is returned as the step value as a `String`, rather than being printed to the build log. (Standard error, if any, will still be printed to the log.) You will often want to call `.trim()` on the result to strip off a trailing newline.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "sh",
    "title": "sh: Shell Script",
    "args": [
      {
        "name": "script",
        "type": "String",
        "description": "Runs a Bourne shell script, typically on a Unix node. Multiple lines are accepted. \n\n \n An interpreter selector may be used, for example: `#!/usr/bin/perl` \n\n \n Otherwise the system default shell will be run, using the `-xe` flags (you can specify `set +e` and/or `set +x` to disable those).",
        "isOptional": false
      },
      {
        "name": "encoding",
        "type": "String",
        "description": "Encoding of process output. In the case of `returnStdout`, applies to the return value of this step; otherwise, or always for standard error, controls how text is copied to the build log. If unspecified, uses the system default encoding of the node on which the step is run. If there is any expectation that process output might include non-ASCII characters, it is best to specify the encoding explicitly. For example, if you have specific knowledge that a given process is going to be producing UTF-8 yet will be running on a node with a different system encoding (typically Windows, since every Linux distribution has defaulted to UTF-8 for a long time), you can ensure correct output by specifying: `encoding: 'UTF-8'`",
        "isOptional": true
      },
      {
        "name": "label",
        "type": "String",
        "description": "Label to be displayed in the pipeline step view and blue ocean details for the step instead of the step type. So the view is more meaningful and domain specific instead of technical.",
        "isOptional": true
      },
      {
        "name": "returnStatus",
        "type": "boolean",
        "description": "Normally, a script which exits with a nonzero status code will cause the step to fail with an exception. If this option is checked, the return value of the step will instead be the status code. You may then compare it to zero, for example.",
        "isOptional": true
      },
      {
        "name": "returnStdout",
        "type": "boolean",
        "description": "If checked, standard output from the task is returned as the step value as a `String`, rather than being printed to the build log. (Standard error, if any, will still be printed to the log.) You will often want to call `.trim()` on the result to strip off a trailing newline.",
        "isOptional": true
      }
    ]
  },
  {
    "command": "ws",
    "title": "ws: Allocate workspace",
    "args": [
      {
        "name": "dir",
        "type": "String",
        "description": "A workspace is automatically allocated for you with the `node` step, or you can get an alternate workspace with this `ws` step, but by default the location is chosen automatically. (Something like `SLAVE_ROOT/workspace/JOB_NAME@2`.) \n\n\n You can instead specify a path here and that workspace will be locked instead. (The path may be relative to the slave root, or absolute.) \n\n\n If concurrent builds ask for the same workspace, a directory with a suffix such as `@2` may be locked instead. Currently there is no option to wait to lock the exact directory requested; if you need to enforce that behavior, you can either fail (`error`) when `pwd` indicates that you got a different directory, or you may enforce serial execution of this part of the build by some other means such as `stage name: '…', concurrency: 1`. \n\n\n If you do not care about locking, just use the `dir` step to change current directory.",
        "isOptional": false
      }
    ]
  }
]